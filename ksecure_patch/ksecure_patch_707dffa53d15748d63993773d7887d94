--- ksecure_backup.bash.orig	2013-01-25 14:43:23.513399094 +0100
+++ ksecure_backup.bash	2013-01-25 15:33:51.313362190 +0100
@@ -15,6 +15,11 @@
 #*  - separate config file
 #*  - automatic upgrades of the script
 #*
+#* Updates:
+#*  - 25-01-2013 0.827 Fixed ignoring exit codes in pipes and not even
+#*                     catching it due to not checking the exit code
+#*                     directly after execution of program.
+#*
 #*** Example:
 #**  Usage
 #* ./ksecure_backup.bash
@@ -23,10 +28,12 @@
 #*
 #*** Info:
 #*  @author      Kevin van Zonneveld <kevin@vanzonneveld.net>
-#*  @version     0.826
+#*  @version     0.827
 #*  @link        http://kevin.vanzonneveld.net
 #*/
 
+#set -e <-- Will quit on the first exit code != 0 :-)
+set -o pipefail
 
 ##########################################################################
 # intialize                                                              #
@@ -910,15 +917,17 @@
 			# encrypt. do not use incremental in case of encryption
 			logit "info: backing up and encrypting directory ${FS_SOUREDIR} (${FS_SOURCESIZE}) to ${ENCR}"
                  ${CMD_TAR} ${TAR_EXCLUDE_X_TAR} -pc${GZIP_ENABLED_X_TAR} ${FS_SOUREDIR} 2>>${LOG_FILE} | ${CMD_OPENSSL} enc -aes-256-cbc -salt -k ${ENCRYPTION_PASS} -out ${ENCR}
+			[ $? -ne 0 ] && ERRORCODE_SAFE=1
             CMD="${CMD_TAR} ${TAR_EXCLUDE_X_TAR} -pc${GZIP_ENABLED_X_TAR} ${FS_SOUREDIR} 2>>${LOG_FILE} | ${CMD_OPENSSL} enc -aes-256-cbc -salt -k ${ENCRYPTION_PASS} -out ${ENCR}"
         else
 			#normal tar+gzip
 			logit "info: backing up directory ${FS_SOUREDIR} (${FS_SOURCESIZE}) to ${DEST}"
                  ${CMD_TAR} ${TAR_EXCLUDE_X_TAR} -pc${GZIP_ENABLED_X_TAR}f ${DEST} --listed-incremental=${SNAR} ${FS_SOUREDIR} 1>/dev/null 2>>${LOG_FILE}
+			[ $? -ne 0 ] && ERRORCODE_SAFE=1
 			CMD="${CMD_TAR} ${TAR_EXCLUDE_X_TAR} -pc${GZIP_ENABLED_X_TAR}f ${DEST} --listed-incremental=${SNAR} ${FS_SOUREDIR} 1>/dev/null 2>>${LOG_FILE}"
 		fi
 
-		if [ $? -ne 0 ]; then
+		if [[ $ERRORCODE_SAFE -ne 0 ]]; then
 			logit "critical: FS backup of ${FS_SOUREDIR} (${FS_SOURCESIZE}) returned errors (${CMD}), more details in ${LOG_FILE}"
 		else
 			logit "debug: (${CMD}) finished without errors"
@@ -938,15 +947,17 @@
 			# encrypt.
 			logit "info: backing up and encrypting dpkg-selection to ${ENCR}"
                  ${CMD_DPKG} --get-selections | ${CMD_BZIP2} -qzc1 | ${CMD_OPENSSL} enc -aes-256-cbc -salt -k ${ENCRYPTION_PASS} -out ${ENCR}
+			[ $? -ne 0 ] && ERRORCODE_SAFE=1
 			CMD="${CMD_DPKG} --get-selections | ${CMD_BZIP2} -qzc1 | ${CMD_OPENSSL} enc -aes-256-cbc -salt -k ${ENCRYPTION_PASS} -out ${ENCR}"
 		else
 			#normal bzip2
 			logit "info: backing up dpkg-selection to ${DEST}"
                  ${CMD_DPKG} --get-selections | ${CMD_BZIP2} -qzc1 >${DEST}
+			[ $? -ne 0 ] && ERRORCODE_SAFE=1
 			CMD="${CMD_DPKG} --get-selections | ${CMD_BZIP2} -qzc1 >${DEST}"
 		fi
 
-		if [ $? -ne 0 ]; then
+		if [[ $ERRORCODE_SAFE -ne 0 ]]; then
 			logit "critical: SY dpkg backup failed (${CMD}), more details in ${LOG_FILE}"
         else
             logit "debug: (${CMD}) finished without errors"
@@ -961,15 +972,17 @@
 			# encrypt.
 			logit "info: backing up and encrypting pear-list to ${ENCR}"
                  ${CMD_PEAR} list | ${CMD_BZIP2} -qzc1 | ${CMD_OPENSSL} enc -aes-256-cbc -salt -k ${ENCRYPTION_PASS} -out ${ENCR}
+			[ $? -ne 0 ] && ERRORCODE_SAFE=1
 			CMD="${CMD_PEAR} list | ${CMD_BZIP2} -qzc1 | ${CMD_OPENSSL} enc -aes-256-cbc -salt -k ${ENCRYPTION_PASS} -out ${ENCR}"
 		else
 			#normal bzip2
 			logit "info: backing up pear-list to ${DEST}"
                  ${CMD_PEAR} list | ${CMD_BZIP2} -qzc1 >${DEST}
+			[ $? -ne 0 ] && ERRORCODE_SAFE=1
 			CMD="${CMD_PEAR} list | ${CMD_BZIP2} -qzc1 >${DEST}"
 		fi
 
-		if [ $? -ne 0 ]; then
+		if [[ $ERRORCODE_SAFE -ne 0 ]]; then
 			logit "warning: SY pear backup failed (${CMD}), more details in ${LOG_FILE}"
         else
             logit "debug: (${CMD}) finished without errors"
@@ -984,15 +997,17 @@
             # encrypt.
             logit "info: backing up and encrypting crontab-list to ${ENCR}"
                  ${CMD_CRONTAB} -l | ${CMD_BZIP2} -qzc1 | ${CMD_OPENSSL} enc -aes-256-cbc -salt -k ${ENCRYPTION_PASS} -out ${ENCR}
+		[ $? -ne 0 ] && ERRORCODE_SAFE=1
             CMD="${CMD_CRONTAB} -l | ${CMD_BZIP2} -qzc1 | ${CMD_OPENSSL} enc -aes-256-cbc -salt -k ${ENCRYPTION_PASS} -out ${ENCR}"
         else
             #normal bzip2
             logit "info: backing up crontab-list to ${DEST}"
                  ${CMD_CRONTAB} -l | ${CMD_BZIP2} -qzc1 >${DEST}
+		[ $? -ne 0 ] && ERRORCODE_SAFE=1
             CMD="${CMD_CRONTAB} -l | ${CMD_BZIP2} -qzc1 >${DEST}"
         fi
 
-        if [ $? -ne 0 ]; then
+	if [[ $ERRORCODE_SAFE -ne 0 ]]; then
             logit "warning: SY crontab backup failed (${CMD}), more details in ${LOG_FILE}"
         else
             logit "debug: (${CMD}) finished without errors"
@@ -1014,15 +1029,17 @@
 					# encrypt.
 					logit "info: backing up (${CMD_MYSQL}) and encrypting database ${DATABASE} to ${DEST}"
                          ${CMD_MYSQLDUMP} -Q --all --complete-insert --quote-names --add-drop-table -p${DB_PASS} -u${DB_USER} -h${DB_HOST} ${DATABASE} 2>>${LOG_FILE} | ${CMD_BZIP2} -qzc1 | ${CMD_OPENSSL} enc -aes-256-cbc -salt -k ${ENCRYPTION_PASS} -out ${ENCR}
+			[ $? -ne 0 ] && ERRORCODE_SAFE=1
 					CMD="${CMD_MYSQLDUMP} -Q --all --complete-insert --quote-names --add-drop-table -p${DB_PASS} -u${DB_USER} -h${DB_HOST} ${DATABASE} 2>>${LOG_FILE} | ${CMD_BZIP2} -qzc1 | ${CMD_OPENSSL} enc -aes-256-cbc -salt -k ${ENCRYPTION_PASS} -out ${ENCR}"
 				else
 					# normal bzip2
 					logit "info: backing up (${CMD_MYSQL}) database ${DATABASE} to ${DEST}"
                          ${CMD_MYSQLDUMP} -Q --all --complete-insert --quote-names --add-drop-table -p${DB_PASS} -u${DB_USER} -h${DB_HOST} ${DATABASE} 2>>${LOG_FILE} | ${CMD_BZIP2} -qzc1 >${DEST}
+			[ $? -ne 0 ] && ERRORCODE_SAFE=1
 					CMD="${CMD_MYSQLDUMP} -Q --all --complete-insert --quote-names --add-drop-table -p${DB_PASS} -u${DB_USER} -h${DB_HOST} ${DATABASE} 2>>${LOG_FILE} | ${CMD_BZIP2} -qzc1 >${DEST}"
 				fi
 
-				if [ $? -ne 0 ]; then
+				if [[ $ERRORCODE_SAFE -ne 0 ]]; then
 					logit "critical: DB backup of ${DATABASE} returned errors, more details in ${LOG_FILE}"
                 else
                     logit "debug: (${CMD}) finished without errors"
@@ -1046,9 +1063,10 @@
             logit "critical: another ftp-upload with pid ${running_pid} is already running"
         else
                  ${CMD_FTPUPLOAD} -h ${FTP_HOST} -u ${FTP_USER} --password ${FTP_PASS} -b -d ${FTP_CDIR} ${FS_DESTINDIR}/* 1>/dev/null 2>>${LOG_FILE}
+		[ $? -ne 0 ] && ERRORCODE_SAFE=1
             CMD="${CMD_FTPUPLOAD} -h ${FTP_HOST} -u ${FTP_USER} --password ${FTP_PASS} -b -d ${FTP_CDIR} ${FS_DESTINDIR}/* 1>/dev/null 2>>${LOG_FILE}"
 
-            if [ $? -ne 0 ]; then
+            if [[ $ERRORCODE_SAFE -ne 0 ]]; then
                 logit "critical: FTP upload returned errors, more details in ${LOG_FILE}"
             else
                 logit "debug: (${CMD}) finished without errors"
@@ -1079,9 +1097,10 @@
             logit "critical: another rsync with pid ${running_pid} is already running"
         else
                  ${CMD_RSYNC} -raz ${FS_DESTINDIR}/* ${RSYNC_USER}@${RSYNC_HOST}:${RSYNC_CDIR}/  1>/dev/null 2>>${LOG_FILE}
+		[ $? -ne 0 ] && ERRORCODE_SAFE=1
             CMD="${CMD_RSYNC} -raz ${FS_DESTINDIR}/* ${RSYNC_USER}@${RSYNC_HOST}:${RSYNC_CDIR}/  1>/dev/null 2>>${LOG_FILE}"
 
-            if [ $? -ne 0 ]; then
+            if [[ $ERRORCODE_SAFE -ne 0 ]]; then
                 logit "critical: RSYNC upload returned errors, more details in ${LOG_FILE}"
             else
                 logit "debug: (${CMD}) finished without errors"
